name: Build & Deploy (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Тег образа (например v1.2.3)"
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write        # чтобы пушить в репозиторий
      packages: write        # чтобы пушить образ в GHCR

    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/helloworld:${{ github.event.inputs.version }}
      DEPLOY_BRANCH: deploy

    steps:
      # 1. Код нужен только для сборки
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.DEPLOY_BRANCH }}

      # 2. Set up Buildx + login в GHCR (GITHUB_TOKEN достаточно)
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Собираем и пушим образ
      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}

      # 4. Устанавливаем yq
      - name: Install yq
        run: |
          curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
            -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

      # 5. Патчим deployment.yaml
      - name: Update image tag in deployment.yaml
        run: |
          yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE }}"' manifests/deployment.yaml
          echo "Новый образ:"
          yq '.spec.template.spec.containers[0].image' manifests/deployment.yaml

      # 6. Коммит + пуш (GITHUB_TOKEN достаточен, потому что пушим из actions в ту же ветку)
      - name: Commit & push manifests
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add manifests/deployment.yaml
          git commit -m "deploy: ${{ env.IMAGE }}"
          git push origin ${{ env.DEPLOY_BRANCH }}